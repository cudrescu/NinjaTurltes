# Schema setup
DROP SCHEMA IF EXISTS hackDB;

CREATE SCHEMA hackDB;
USE hackDB;

# Table setup
CREATE TABLE ROLE (
	ID					INT NOT NULL AUTO_INCREMENT,
	NAME				VARCHAR(255) UNIQUE NOT NULL,
	DESCRIPTION			VARCHAR(255) NOT NULL,
    CREATED				TIMESTAMP NOT NULL DEFAULT NOW(),
    VERSION				INT NOT NULL DEFAULT 0,
	PRIMARY KEY (`ID`)
);

CREATE TABLE PROFILE (
	ID					INT NOT NULL AUTO_INCREMENT,
    FIRSTNAME			VARCHAR(255) NOT NULL,
    LASTNAME			VARCHAR(255) NOT NULL,
    CREATED				TIMESTAMP NOT NULL DEFAULT NOW(),
    VERSION				INT NOT NULL DEFAULT 0,
	PRIMARY KEY (`ID`)
);

CREATE TABLE USER (
	ID					INT NOT NULL AUTO_INCREMENT,
	EMAIL				VARCHAR(255) UNIQUE NOT NULL,
	PASSWORD			VARCHAR(255) NOT NULL,
	ENABLED				BIT(1) NOT NULL,
	ROLE_ID				INT NOT NULL,
	PROFILE_ID			INT NOT NULL,
    CREATED				TIMESTAMP NOT NULL DEFAULT NOW(),
    VERSION				INT NOT NULL DEFAULT 0,
	PRIMARY KEY (`ID`),
	FOREIGN KEY (ROLE_ID) REFERENCES ROLE(ID),
	FOREIGN KEY (PROFILE_ID) REFERENCES PROFILE(ID)
);


DELIMITER $$

CREATE TRIGGER hackDB.UPDATE_ROLE_VERION AFTER INSERT ON ROLE
FOR EACH ROW
	BEGIN
		UPDATE ROLE SET VERSION = VERSION + 1 WHERE ID = NEW.ID;
	END $$

CREATE TRIGGER hackDB.UPDATE_PROFILE_VERION AFTER INSERT ON PROFILE
FOR EACH ROW
	BEGIN
		UPDATE PROFILE SET VERSION = VERSION + 1 WHERE ID = NEW.ID;
	END $$

CREATE TRIGGER hackDB.UPDATE_USER_VERION AFTER INSERT ON USER
FOR EACH ROW
	BEGIN
		UPDATE USER SET VERSION = VERSION + 1 WHERE ID = NEW.ID;
	END $$

DELIMITER ;